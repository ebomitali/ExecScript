/*
Loads properties, expands them, write to project.properties

Properties will be available at definition time as
code calls run expansion (vs define an expansion task)
As usual triggered with

apply from: 'almProperties.gradle'

1. define sensible defaults for ikanHome, almHome according to os or overwrite with env/ikan alm settings
2. load additional properties from phase properties files, project property file, gradle properties fiel
3. adds t
 */

import groovy.transform.InheritConstructors
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import static groovy.io.FileType.FILES
//incubating, api is going to change
import org.gradle.internal.os.OperatingSystem;

/*
Extends HashMap with some useful loading function
 */
@InheritConstructors
class AlmProperties extends HashMap<String, String> {

    void loadEntriesFromProperties(Properties props) {
        // Properties extends HashTable<Object,Object>
        // should force to String key and value
        for (final String name : props.stringPropertyNames())
            this.put(name, props.getProperty(name))
    }

    // putAll inherited by Map accept Properties
    // This method is used to load the properties file
    // uses a path Path rn_demo = Paths.get("C:/tutorial/Java", "demo.txt");
    boolean loadEntriesFromPropertiesFile(Path aPath) {
        InputStream iStream = null;
        boolean loaded = false
        // temp object to easy loading file
        Properties props = new Properties()
        try {
            // Loading properties file from the path (relative path given here)
            iStream = Files.newInputStream(aPath)
            props.load(iStream)
            loadEntriesFromProperties(props)
            loaded = true
        } catch (IOException e) {
            println "IOException loading ${aPath.toString()}"
        } finally {
            try {
                if (iStream != null) {
                    iStream.close();
                }
            } catch (IOException e) {
                println "IOExeception closing ${aPath.toString()}"
            }
        }
        loaded
    }

    def dumpToFile(File fd) {
        //println('Creating all.properties file')
        if (fd.exists())
            fd.delete()
        if (fd.createNewFile()) {
            // only ext properties
            this.sort().keySet().each {
                //println "Writing ${it} ->  ${project.ext.properties[it]}"
                //project.it, project[it] etc will do
                fd << "${it}=${this[it]}\n"
            }
        }
    }

    Properties toProperties() {
        this as Properties
    }
}

// --- Bootstrapping ---
// set ikan.home, alm.home, alm.system path with default values
// if an env variables (IKAN_HOME, ALM_HOME) are found, use that values
// if a gradle.properties are found (dir.ikan.home, dir.alm.home) use that values
String ikanHome
println 'Configuring ' + OperatingSystem.current().getFamilyName() + ' defaults'
if (OperatingSystem.current().isLinux() || OperatingSystem.current().getFamilyName().contains('solaris')) {
    ikanHome = "/opt/ikan"
} else {
    //OperatingSystem.current().isWindows()
    ikanHome = "D:/ikan"
}

// set ikanHome
if (System.getenv('IKAN_HOME') != null) {
    ikanHome = System.getenv('IKAN_HOME')
}
if (project.hasProperty('dir.ikan.home')) {
    ikanHome = project.property('dir.ikan.home')
}
// set almHome
String almHome = ikanHome + '/alm'
if (System.getenv('ALM_HOME') != null) {
    almHome = System.getenv('ALM_HOME')
}
if (project.hasProperty('dir.alm.home')) {
    almHome = project.property('dir.alm.home')
}

String almSystem = ikanHome + '/system'
if (project.hasProperty('dir.alm.system')) {
    almSystem = project.property('dir.alm.system')
}

/*
Load properties within resources directory (phase)
then <project>.properties (global to project) then gradle.properties (generated by Ikan Alm
when launching level)
To add some code to load phase-<env>.properties selecting the one for current
environment and excluding other environments
 */

AlmProperties ap = new AlmProperties()
//add default properties
ap['almHome'] = almHome
ap['ikanHome'] = ikanHome
ap['almSystem'] = almSystem
ap['toolsHome'] = ikanHome + '/tools'
//add <project name>.properties under system/phaseResources
Path prjProps = Paths.get(almSystem, 'projectResources', project.property('alm.project.name')+'.properties')
if (Files.isRegularFile(prjProps)) {
    if (ap.loadEntriesFromPropertiesFile(prjProps)) {
        println "Loaded ${prjProps.toString()}"
    }
} else {
    println "Project properties file not found at ${prjProps.toString()}"
}
//eventually load resources properties - maven standard
File resourcesDir = project.file("resources")
if (resourcesDir.exists()) {
    resourcesDir.eachFileMatch(FILES, ~/.*\.properties/) {
        File fi ->
            if (ap.loadEntriesFromPropertiesFile(fi.toPath())) {
                println "Loaded ${fi.toPath().toString()}"
            }
    }
}

//Look for a seed file with properties defining the artifact to download
//File must exists
Path sourceDir = Paths.get(project.property('source'))
String pkgName = project.property('alm.package.name')
//def pkgNamePattern = ~/(?i)${pkgName}.properties/ case insensitive
List<String> pkgPropList = null
try {
    pkgPropList = new FileNameByRegexFinder().getFileNames(project.property('source'), "(?i)${pkgName}.properties")
} catch (Exception excp) {
    println "Got exception: ${excp.message}"
}
//println pkgPropList
if (!pkgPropList || pkgPropList.size() != 1)
    println "Unable to find ${pkgName}.properties under ${source}"
assert pkgPropList:"Expected package properties file. The ${pkgName}.properties file does not exists."
File packageProps = project.file(pkgPropList[0])
if (packageProps.exists()) {
    ap.loadEntriesFromPropertiesFile(packageProps.toPath())
    println "Loaded ${packageProps.toPath().toString()}"
} else {
    println "Uname to find ${packageProps.toPath().toString()}"
}

//Eventually properties defined at runtime from Ikan Alm
//and stored in gradle.properties
ap.loadEntriesFromPropertiesFile(project.file("gradle.properties").toPath())

//After loading properties, dump to a file for later expansion through ant task
File uxpProps = File.createTempFile('uxp', '.properties', project.file('.'))
//println "Dumping to ${uxpProps.canonicalPath}"
ap.dumpToFile(uxpProps)
//Load all (unexpanded) properties to project to allow filterchain/expandproperties processing
File xpProps = project.file('all.properties')
//println "Copy to ${xpProps.canonicalPath}"
// load into ant to define key/values for expandproperties
ant.loadproperties(srcFile: uxpProps.canonicalPath)
ant.copy(tofile:xpProps.canonicalPath, file:uxpProps.canonicalPath, overwrite: true ) {
    filterchain(){
        expandproperties()
    }
}
Files.delete(uxpProps.toPath())
// load props then move to project.ext to make them available to gradle
// at configuration and execution time
AlmProperties allp = new AlmProperties()
allp.loadEntriesFromPropertiesFile(xpProps.toPath())
allp.keySet().each {
    project.ext[it] = allp[it]
}
